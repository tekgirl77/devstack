# Sample ``local.conf`` for user-configurable variables in ``stack.sh``

# NOTE: Copy this file to the root DevStack directory for it to work properly.

# ``local.conf`` is a user-maintained settings file that is sourced from ``stackrc``.
# This gives it the ability to override any variables set in ``stackrc``.
# Also, most of the settings in ``stack.sh`` are written to only be set if no
# value has already been set; this lets ``local.conf`` effectively override the
# default values.

# This is a collection of some of the settings we have found to be useful
# in our DevStack development environments. Additional settings are described
# in http://devstack.org/local.conf.html
# These should be considered as samples and are unsupported DevStack code.

# The ``localrc`` section replaces the old ``localrc`` configuration file.
# Note that if ``localrc`` is present it will be used in favor of this section.
[[local|localrc]]
#OFFLINE=True
RECLONE=True

HOST_IP=10.0.0.2

CINDER_BRANCH=stable/mitaka
GLANCE_BRANCH=stable/mitaka
HEAT_BRANCH=stable/mitaka
HORIZON_BRANCH=stable/mitaka
KEYSTONE_BRANCH=stable/mitaka
KEYSTONECLIENT_BRANCH=stable/mitaka
NEUTRON_BRANCH=stable/mitaka
NOVA_BRANCH=stable/mitaka
NOVACLIENT_BRANCH=stable/mitaka
SWIFT_BRANCH=stable/mitaka


#-----------------------------
# Common congigurations
#-----------------------------

# Global Requirements branch
# ...  

# Enable Ceilometer (Telemetry Monitoring)
enable_service ceilometer-acompute ceilometer-acentral ceilometer-collector ceilometer-api
CEILOMETER_BACKEND=mongodb
enable_plugin ceilometer https://git.openstack.org/openstack/ceilometer stable/mitaka
# Enable AODH with Ceilometer (for Alarms)
enable_plugin aodh https://git.openstack.org/openstack/aodh stable/mitaka
# Enable Ceilometer Profiler Notifier
CEILOMETER_NOTIFICATION_TOPICS=notifications,profiler

# Enable Swift (Object Storage)
enable_service s-proxy s-object s-container s-account

# Enable Sahara (Data Processing)
enable_plugin sahara git://git.openstack.org/openstack/sahara stable/mitaka
enable_plugin sahara-dashboard git://git.openstack.org/openstack/sahara-dashboard stable/mitaka

# Enable Trove (Database)
enable_plugin trove git://git.openstack.org/openstack/trove stable/mitaka
enable_plugin trove-dashboard git://git.openstack.org/openstack/trove-dashboard stable/mitaka

# Enable Neutron (Networking)
enable_plugin neutron https://git.openstack.org/openstack/neutron stable/mitaka
# Neutron VPNaaS
# enable_plugin neutron-vpnaas https://git.openstack.org/openstack/neutron-vpnaas stable/mitaka
# Load the external LBaaS plugin.
enable_plugin neutron-lbaas https://git.openstack.org/openstack/neutron-lbaas
enable_plugin octavia https://git.openstack.org/openstack/octavia


# Enable Magnum (Container Orchestration Engine)
#enable_plugin magnum https://git.openstack.org/openstack/magnum master
#enable_plugin magnum-ui https://git.openstack.org/openstack/magnum-ui master
#enable_plugin barbican https://git.openstack.org/openstack/barbican

# Enable Designate (DNSaaS)
# designate-dashboard is installed by designate devstack plugin
enable_plugin designate https://git.openstack.org/openstack/designate stable/mitaka
DESIGNATE_BACKEND_DRIVER=fake
DESIGNATE_BRANCH=stable/mitaka
DESIGNATEDASHBOARD_BRANCH=stable/mitaka

# Enable Murano (Application Catalog)
# murano-dashboard is installed by murano devstack plugin
enable_plugin murano https://git.openstack.org/openstack/murano stable/mitaka
MURANO_BRANCH=stable/mitaka
MURANO_DASHBOARD_BRANCH=stable/mitaka
# Murano Cloud Foundry Broker API service
enable_service murano-cfapi
# Glare Artifact Repository as storage for packages
enable_service g-glare
MURANO_APPS=io.murano.apps.apache.Tomcat,io.murano.apps.Guacamole

# Enable Heat (Orchestration)
enable_service heat h-api h-api-cfn h-api-cw h-eng
# Download images Heat can launch - URLs for any cloud image may be specified, 
# but fedora images from F20 contain the heat-cfntools package which is required for some heat functionality.
IMAGE_URL_SITE="https://download.fedoraproject.org/"
IMAGE_URL_PATH="/pub/fedora/linux/releases/23/Cloud/x86_64/Images/"
IMAGE_URL_FILE="Fedora-Cloud-Base-23-20151030.x86_64.qcow2"
IMAGE_URLS+=","$IMAGE_URL_SITE$IMAGE_URL_PATH$IMAGE_URL_FILE

#Keystone Version 
ENABLE_IDENTITY_V2=False

# Using git versions of clients
# -----------------------------
# By default clients are installed from pip.  See LIBS_FROM_GIT in
# stackrc for details on getting clients from specific branches or
# revisions.  e.g.
# LIBS_FROM_GIT="python-ironicclient"
# IRONICCLIENT_BRANCH=refs/changes/44/2.../1
# Use latest python-openstackclient to address bug: https://bugs.launchpad.net/python-openstackclient/+bug/1447704
# https://git.openstack.org/cgit/openstack/python-openstackclient/commit/?id=b8432408e68855d7ce9269b7e681de3c5b733b09
LIBS_FROM_FIG="python-openstackclient"
HORIZONAUTH_BRANCH=stable/mitaka


KEYSTONE_TOKEN_FORMAT=UUID
PRIVATE_NETWORK_NAME=internal
PUBLIC_NETWORK_NAME=public

# Exercises
ACTIVE_TIMEOUT==300
BOOT_TIMEOUT=300


#-----------------------------
# Neutron
#-----------------------------
ENABLED_SERVICES=neutron,q-svc,q-agt,q-dhcp,q-l3,q-meta
# Enable LBaaS v2
ENABLED_SERVICES+=,q-lbaasv2
ENABLED_SERVICES+=,octavia,o-cw,o-hk,o-hm,o-api
ENABLED_SERVICES+=,q-fwaas,q-vpn,q-qos,q-flavors
# Nova
ENABLED_SERVICES+=,n-api,n-crt,n-cpu,n-cond,n-sch
# Since we are using neutron, disable nova networking
DISABLE_SERVICE n-net
# Glance
ENABLED_SERVICES+=,g-api,g-reg
# Cinder
ENABLED_SERVICES+=,c-api,c-vol,c-sch
# Optional, to enable tempest configuration as part of devstack
ENABLE_SERVICES+=,tempest
INSTALL_TEMPEST=True
# murano devstack enables q-metering by default
disable_service q-metering

Q_PLUGIN=ml2
Q_USE_DEBUG_COMMAND=True
if [ "$Q_PLUGIN" = "ml2" ]; then
  #Q_ML2_TENANT_NETWORK_TYPE=gre
  Q_ML2_TENANT_NETWORK_TYPE=vxlan
  :
fi

## Neutron options
#Q_USE_SECGROUP=True
#FLOATING_RANGE="10.0.0.0/24"
#FIXED_RANGE="172.24.4.0/24"
#Q_FLOATING_ALLOCATION_POOL=start=10.0.0.3,end=10.0.0.254
#PUBLIC_NETWORK_GATEWAY="10.0.0.1"
#PUBLIC_INTERFACE=eth0

#Open vSwitch provider networking configuration
Q_USE_PROVIDERNET_FOR_PUBLIC=True
OVS_PHYSICAL_BRIDGE=br-ex
PUBLIC_BRIDGE=br-ex
OVS_BRIDGE_MAPPINGS=public:br-ex

#-----------------------------
# Devstack configurations
#-----------------------------
LOGDIR=$DEST/logs
SCREEN_LOGDIR=$LOGDIR
SCREEN_HARDSTATUS="%{= rw} %H %{= wk} %L=%-w%{= bw}%30L> %n%f %t*%{= wk}%+Lw%-17< %-=%{= gk} %y/%m/%d %c"
LOGFILE=$LOGDIR/devstack.log
LOGDAYS=1
#LOG_COLOR=False
VERBOSE=True
ENABLE_DEBUG_LOG_LEVEL=True

ADMIN_PASSWORD=nomoresecret
MYSQL_PASSWORD=$ADMIN_PASSWORD
RABBIT_PASSWORD=$ADMIN_PASSWORD
SERVICE_PASSWORD=$ADMIN_PASSWORD
SERVICE_TOKEN=$ADMIN_PASSWORD
SWIFT_HASH=$ADMIN_PASSWORD

#SERVICE_HOST=127.0.0.1
#MYSQL_HOST=127.0.0.1
#RABBIT_HOST=127.0.0.1
#GLANCE_HOSTPORT=127.0.0.1:9292

# For development purposes the default of 3 replicas is usually not required.
# Set this to 1 to save some resources:
SWIFT_REPLICAS=1

[[post-config|/etc/neutron/dhcp_agent.ini]]
# The DHCP server can assist with providing metadata support on isolated
# networks. Setting this value to True will cause the DHCP server to append
# specific host routes to the DHCP request. The metadata service will only
# be activated when the subnet does not contain any router port. The guest
# instance must be configured to request host routes via DHCP (Option 121).
[DEFAULT]
enable_isolated_metadata = True

______________________________

